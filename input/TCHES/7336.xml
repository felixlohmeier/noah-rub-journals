<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>7336</id>
	<dc:title xml:lang="en-US">3-Share Threshold Implementation of AES S-box without Fresh Randomness</dc:title>
	<dc:creator>Sugawara, Takeshi</dc:creator>
	<dc:subject xml:lang="en-US">Threshold Implementation</dc:subject>
	<dc:subject xml:lang="en-US">AES</dc:subject>
	<dc:subject xml:lang="en-US">Side-channel Attack</dc:subject>
	<dc:subject xml:lang="en-US">Changing of the Guards</dc:subject>
	<dc:subject xml:lang="en-US">Differential Power Analysis</dc:subject>
	<dc:description xml:lang="en-US">Threshold implementation is studied as a countermeasure against sidechannel attack. There had been no threshold implementation for the AES and Keccak S-boxes that satisfies an important property called uniformity. In the conventional implementations, intermediate values are remasked to compensate for the lack of uniformity. The remasking consumes thousands of fresh random bits and its implementation cost is a serious concern. Daemen recently proposed a 3-share uniform threshold implementation of the Keccak S-box. This is enabled by a new technique called the changing of the guards which can be applied to any invertible functions. Subsequently, Wegener et al. proposed a 4-share threshold implementation of the AES S-box based on the changing of the guards technique. However, a 3-share threshold implementation of AES S-box remains open. The difficulty stays in 2-input multiplication, used in decomposed S-box representations, which is non-invertible because of different input and output sizes. In this study, this problem is addressed by introducing a certain generalization of the changing of the guards technique. The proposed method provides a generic way to construct a uniform sharing for a target function having different input and output sizes. The key idea is to transform a target function into an invertible one by adding additional inputs and outputs. Based on the proposed technique, the first 3-share threshold implementation of AES S-box without fresh randomness is presented. Performance evaluation and simulation-based leakage assessment of the implementation are also presented.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universit√§t Bochum</dc:publisher>
	<dc:date>2018-11-09</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/7336</dc:identifier>
	<dc:identifier>10.13154/tches.v2019.i1.123-145</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2019, Issue 1; 123-145</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7336/6508</dc:relation>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7336/7911</dc:relation>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7336/7912</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2018 Takeshi Sugawara</dc:rights>
	<dc:rights xml:lang="en-US">https://creativecommons.org/licenses/by/4.0</dc:rights>
</oai_dc:dc>