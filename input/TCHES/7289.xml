<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>7289</id>
	<dc:title xml:lang="en-US">Efficient Side-Channel Protections of ARX Ciphers</dc:title>
	<dc:creator>Jungk, Bernhard</dc:creator>
	<dc:creator>Petri, Richard</dc:creator>
	<dc:creator>Stöttinger, Marc</dc:creator>
	<dc:subject xml:lang="en-US">Modular</dc:subject>
	<dc:subject xml:lang="en-US">Addition</dc:subject>
	<dc:subject xml:lang="en-US">Masking</dc:subject>
	<dc:subject xml:lang="en-US">Side-channel</dc:subject>
	<dc:subject xml:lang="en-US">Analysis</dc:subject>
	<dc:subject xml:lang="en-US">ChaCha20</dc:subject>
	<dc:description xml:lang="en-US">The current state of the art of Boolean masking for the modular addition operation in software has a very high performance overhead. Firstly, the instruction count is very high compared to a normal addition operation. Secondly, until recently, the entropy consumed by such protections was also quite high. Our paper significantly improves both aspects, by applying the Threshold Implementation (TI) methodology with two shares and by reusing internal values as randomness source in such a way that the uniformity is always preserved. Our approach performs considerably faster compared to the previously known masked addition and subtraction algorithms by Coron et al. and Biryukov et al. improving the state of the art by 36%, if we only consider the number of ARM assembly instructions. Furthermore, similar to the masked adder from Biryukov et al. we reduce the amount of randomness and only require one bit additional entroy per addition, which is a good trade-off for the improved performance. We applied our improved masked adder to ChaCha20, for which we provide two new first-order protected implementations and achieve a 36% improvement over the best published result for ChaCha20 using an ARM Cortex-M4 microprocessor.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universität Bochum</dc:publisher>
	<dc:date>2018-08-16</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/7289</dc:identifier>
	<dc:identifier>10.13154/tches.v2018.i3.627-653</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2018, Issue 3; 627-653</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7289/6466</dc:relation>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7289/7966</dc:relation>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/7289/7967</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2018 Bernhard Jungk, Richard Petri, Marc Stöttinger</dc:rights>
	<dc:rights xml:lang="en-US">https://creativecommons.org/licenses/by/4.0</dc:rights>
</oai_dc:dc>