<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>9295</id>
	<dc:title xml:lang="en-US">Neon NTT: Faster Dilithium, Kyber, and Saber on Cortex-A72 and Apple M1</dc:title>
	<dc:creator>Becker, Hanno</dc:creator>
	<dc:creator>Hwang, Vincent</dc:creator>
	<dc:creator>Kannwischer, Matthias J.</dc:creator>
	<dc:creator>Yang, Bo-Yin</dc:creator>
	<dc:creator>Yang, Shang-Yi</dc:creator>
	<dc:subject xml:lang="en-US">NIST PQC</dc:subject>
	<dc:subject xml:lang="en-US">Armv8-A</dc:subject>
	<dc:subject xml:lang="en-US">Neon</dc:subject>
	<dc:subject xml:lang="en-US">Dilithium</dc:subject>
	<dc:subject xml:lang="en-US">Kyber</dc:subject>
	<dc:subject xml:lang="en-US">Saber</dc:subject>
	<dc:description xml:lang="en-US">We present new speed records on the Armv8-A architecture for the latticebased schemes Dilithium, Kyber, and Saber. The core novelty in this paper is the combination of Montgomery multiplication and Barrett reduction resulting in “Barrett multiplication” which allows particularly efficient modular one-known-factor multiplication using the Armv8-A Neon vector instructions. These novel techniques combined with fast two-unknown-factor Montgomery multiplication, Barrett reduction sequences, and interleaved multi-stage butterflies result in significantly faster code. We also introduce “asymmetric multiplication” which is an improved technique for caching the results of the incomplete NTT, used e.g. for matrix-to-vector polynomial multiplication. Our implementations target the Arm Cortex-A72 CPU, on which our speed is 1.7× that of the state-of-the-art matrix-to-vector polynomial multiplication in kyber768 [Nguyen–Gaj 2021]. For Saber, NTTs are far superior to Toom–Cook multiplication on the Armv8-A architecture, outrunning the matrix-to-vector polynomial multiplication by 2.0×. On the Apple M1, our matrix-vector products run 2.1× and 1.9× faster for Kyber and Saber respectively.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universität Bochum</dc:publisher>
	<dc:date>2021-11-19</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/9295</dc:identifier>
	<dc:identifier>10.46586/tches.v2022.i1.221-244</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2022, Issue 1; 221-244</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/9295/8861</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2021 Hanno Becker, Vincent Hwang, Matthias J. Kannwischer, Bo-Yin Yang, Shang-Yi Yang</dc:rights>
	<dc:rights xml:lang="en-US">https://creativecommons.org/licenses/by/4.0/</dc:rights>
</oai_dc:dc>