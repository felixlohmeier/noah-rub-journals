<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>8739</id>
	<dc:title xml:lang="en-US">Fixslicing AES-like Ciphers: New bitsliced AES speed records on ARM-Cortex M and RISC-V</dc:title>
	<dc:creator>Adomnicai, Alexandre</dc:creator>
	<dc:creator>Peyrin, Thomas</dc:creator>
	<dc:subject xml:lang="en-US">AES</dc:subject>
	<dc:subject xml:lang="en-US">ARM</dc:subject>
	<dc:subject xml:lang="en-US">RISC-V</dc:subject>
	<dc:subject xml:lang="en-US">Implementation</dc:subject>
	<dc:subject xml:lang="en-US">Bitslicing</dc:subject>
	<dc:subject xml:lang="en-US">Fixslicing</dc:subject>
	<dc:description xml:lang="en-US">The fixslicing implementation strategy was originally introduced as a new representation for the hardware-oriented GIFT block cipher to achieve very efficient software constant-time implementations. In this article, we show that the fundamental idea underlying the fixslicing technique is not of interest only for GIFT, but can be applied to other ciphers as well. Especially, we study the benefits of fixslicing in the case of AES and show that it allows to reduce by 52% the amount of operations required by the linear layer when compared to the current fastest bitsliced implementation on 32-bit platforms. Overall, we report that fixsliced AES-128 allows to reach 80 and 91 cycles per byte on ARM Cortex-M and E31 RISC-V processors respectively (assuming pre-computed round keys), improving the previous records on those platforms by 21% and 26%. In order to highlight that our work also directly improves masked implementations that rely on bitslicing, we report implementation results when integrating first-order masking that outperform by 12% the fastest results reported in the literature on ARM Cortex-M4. Finally, we demonstrate the genericity of the fixslicing technique for AES-like designs by applying it to the Skinny-128 tweakable block ciphers.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universit√§t Bochum</dc:publisher>
	<dc:date>2020-12-03</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/8739</dc:identifier>
	<dc:identifier>10.46586/tches.v2021.i1.402-425</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2021, Issue 1; 402-425</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/8739/8339</dc:relation>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/8739/8604</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2020 Alexandre Adomnicai, Thomas Peyrin</dc:rights>
	<dc:rights xml:lang="en-US">https://creativecommons.org/licenses/by/4.0/</dc:rights>
</oai_dc:dc>