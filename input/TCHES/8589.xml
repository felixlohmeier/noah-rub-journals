<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>8589</id>
	<dc:title xml:lang="en-US">ISA Extensions for Finite Field Arithmetic: Accelerating Kyber and NewHope on RISC-V</dc:title>
	<dc:creator>Alkim, Erdem</dc:creator>
	<dc:creator>Evkan, Hülya</dc:creator>
	<dc:creator>Lahr, Norman</dc:creator>
	<dc:creator>Niederhagen, Ruben</dc:creator>
	<dc:creator>Petri, Richard</dc:creator>
	<dc:subject xml:lang="en-US">PQC</dc:subject>
	<dc:subject xml:lang="en-US">lattice-based crypto</dc:subject>
	<dc:subject xml:lang="en-US">NewHope</dc:subject>
	<dc:subject xml:lang="en-US">Kyber</dc:subject>
	<dc:subject xml:lang="en-US">RISC-V</dc:subject>
	<dc:subject xml:lang="en-US">ISA extension</dc:subject>
	<dc:description xml:lang="en-US">We present and evaluate a custom extension to the RISC-V instruction set for finite field arithmetic. The result serves as a very compact approach to software-hardware co-design of PQC implementations in the context of small embedded processors such as smartcards. The extension provides instructions that implement finite field operations with subsequent reduction of the result. As small finite fields are used in various PQC schemes, such instructions can provide a considerable speedup for an otherwise software-based implementation. Furthermore, we create a prototype implementation of the presented instructions for the extendable VexRiscv core, integrate the result into a chip design, and evaluate the design on two different FPGA platforms. The effectiveness of the extension is evaluated by using the instructions to optimize the Kyber and NewHope key-encapsulation schemes. To that end, we also present an optimized software implementation for the standard RISC-V instruction set for the polynomial arithmetic underlying those schemes, which serves as basis for comparison. Both variants are tuned on an assembler level to optimally use the processor pipelines of contemporary RISC-V CPUs. The result shows a speedup for the polynomial arithmetic of up to 85% over the basic software implementation. Using the custom instructions drastically reduces the code and data size of the implementation without introducing runtime-performance penalties at a small cost in circuit size. When used in the selected schemes, the custom instructions can be used to replace a full general purpose multiplier to achieve very compact implementations.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universität Bochum</dc:publisher>
	<dc:date>2020-06-19</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/8589</dc:identifier>
	<dc:identifier>10.13154/tches.v2020.i3.219-242</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2020, Issue 3; 219-242</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/8589/8156</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2020 Erdem Alkim, Hülya Evkan, Norman Lahr, Ruben Niederhagen, Richard Petri</dc:rights>
	<dc:rights xml:lang="en-US">https://creativecommons.org/licenses/by/4.0</dc:rights>
</oai_dc:dc>