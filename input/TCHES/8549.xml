<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><id>8549</id>
	<dc:title xml:lang="en-US">When one vulnerable primitive turns viral: Novel single-trace attacks on ECDSA and RSA</dc:title>
	<dc:creator>Cabrera Aldaya, Alejandro</dc:creator>
	<dc:creator>Brumley, Billy Bob </dc:creator>
	<dc:subject xml:lang="en-US">side-channel analysis</dc:subject>
	<dc:subject xml:lang="en-US">vulnerable countermeasure</dc:subject>
	<dc:subject xml:lang="en-US">ECDSA</dc:subject>
	<dc:subject xml:lang="en-US">RSA</dc:subject>
	<dc:subject xml:lang="en-US">binary</dc:subject>
	<dc:subject xml:lang="en-US">GCD</dc:subject>
	<dc:subject xml:lang="en-US">modular inversion</dc:subject>
	<dc:subject xml:lang="en-US">Intel SGX</dc:subject>
	<dc:subject xml:lang="en-US">mbedTLS</dc:subject>
	<dc:subject xml:lang="en-US">CVE-2019-18222</dc:subject>
	<dc:description xml:lang="en-US">Microarchitecture based side-channel attacks are common threats nowadays. Intel SGX technology provides a strong isolation from an adversarial OS, however, does not guarantee protection against side-channel attacks. In this paper, we analyze the security of the mbedTLS binary GCD algorithm, an implementation that offers interesting challenges when compared for example with OpenSSL, due to the usage of very tight loops in the former. Using practical experiments we demonstrate the mbedTLS binary GCD implementation is vulnerable to side-channel analysis using the SGX-Step framework against mbedTLS based SGX enclaves.We analyze the security of some use cases of this algorithm in this library, resulting in the discovery of a new vulnerability in the ECDSA code path that allows a single-trace attack against this implementation. This vulnerability is three-fold interesting:

It resides in the implementation of a countermeasure which makes it more dangerous due to the false state of security the countermeasure currently offers.
It reduces mbedTLS ECDSA security to an integer factorization problem.
An unexpected GCD call inside the ECDSA code path compromises the countermeasure.

We also cover an orthogonal use case, this time inside the mbedTLS RSA code path during the computation of a CRT parameter when loading a private key. The attack also exploits the binary GCD implementation threat, showing how a single vulnerable primitive leads to multiple vulnerabilities. We demonstrate both security threats with end-to-end attacks using 1000 trials each, showing in both cases single-trace attacks can be achieved with success rates very close to 100%.</dc:description>
	<dc:publisher xml:lang="en-US">Ruhr-Universit√§t Bochum</dc:publisher>
	<dc:date>2020-03-02</dc:date>
	<dc:type>info:eu-repo/semantics/article</dc:type>
	<dc:type>info:eu-repo/semantics/publishedVersion</dc:type>
	<dc:format>application/pdf</dc:format>
	<dc:identifier>https://tches.iacr.org/index.php/TCHES/article/view/8549</dc:identifier>
	<dc:identifier>10.13154/tches.v2020.i2.196-221</dc:identifier>
	<dc:source xml:lang="en-US">IACR Transactions on Cryptographic Hardware and Embedded Systems; Volume 2020, Issue 2; 196-221</dc:source>
	<dc:source>2569-2925</dc:source>
	<dc:language>eng</dc:language>
	<dc:relation>https://tches.iacr.org/index.php/TCHES/article/view/8549/8114</dc:relation>
	<dc:rights xml:lang="en-US">Copyright (c) 2020 Alejandro Cabrera Aldaya, Billy Bob Brumley</dc:rights>
	<dc:rights xml:lang="en-US">http://creativecommons.org/licenses/by/4.0/</dc:rights>
</oai_dc:dc>